## @type: DataSink
## @args: [connection_type = "s3", connection_options = {"path":"s3://intellidatastatic1/media"}, format = "json", format_options = <format_options>, transformation_ctx = "<transformation_ctx>"]
## @return: <output>
## @inputs: [frame = <frame>]
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("serial", "long", "serial", "long"), ("employerid", "string", "employerid", "string"), ("name", "string", "name", "string"), ("description", "string", "description", "string"), ("federalemployeridentificationnumber", "string", "federalemployeridentificationnumber", "string"), ("carriermasteragreementnumber", "string", "carriermasteragreementnumber", "string"), ("address_line_1", "string", "address_line_1", "string"), ("address_line_2", "string", "address_line_2", "string"), ("city", "string", "city", "string"), ("state", "string", "state", "string"), ("zipcode", "long", "zipcode", "long"), ("purpose", "string", "purpose", "string"), ("transmission", "long", "transmission", "long")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("serial", "long", "serial", "long"), ("employerid", "string", "employerid", "string"), ("name", "string", "name", "string"), ("description", "string", "description", "string"), ("federalemployeridentificationnumber", "string", "federalemployeridentificationnumber", "string"), ("carriermasteragreementnumber", "string", "carriermasteragreementnumber", "string"), ("address_line_1", "string", "address_line_1", "string"), ("address_line_2", "string", "address_line_2", "string"), ("city", "string", "city", "string"), ("state", "string", "state", "string"), ("zipcode", "long", "zipcode", "long"), ("purpose", "string", "purpose", "string"), ("transmission", "long", "transmission", "long")], transformation_ctx = "applymapping1")
## @type: SelectFields
## @args: [paths = ["serial", "employerid", "name", "description", "federalemployeridentificationnumber", "carriermasteragreementnumber", "address_line_1", "address_line_2", "city", "state", "zipcode", "purpose", "transmission"], transformation_ctx = "selectfields2"]
## @return: selectfields2
## @inputs: [frame = applymapping1]
selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["serial", "employerid", "name", "description", "federalemployeridentificationnumber", "carriermasteragreementnumber", "address_line_1", "address_line_2", "city", "state", "zipcode", "purpose", "transmission"], transformation_ctx = "selectfields2")
## @type: ResolveChoice
## @args: [choice = "MATCH_CATALOG", database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "resolvechoice3"]
## @return: resolvechoice3
## @inputs: [frame = selectfields2]
resolvechoice3 = ResolveChoice.apply(frame = selectfields2, choice = "MATCH_CATALOG", database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "resolvechoice3")
## @type: DataSink
## @args: [database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "datasink4"]
## @return: datasink4
## @inputs: [frame = resolvechoice3]
datasink4 = glueContext.write_dynamic_frame.from_catalog(frame = resolvechoice3, database = "intellidata-meta-db", table_name = "employers", transformation_ctx = "datasink4")
datasink4 = glueContext.write_dynamic_frame.from_options(frame = applymapping1, connection_type = "s3", connection_options = {"path": "s3://intellidatastatic1"}, format = "json", transformation_ctx = "datasink4")
job.commit()
